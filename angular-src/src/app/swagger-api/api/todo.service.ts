/**
 * JAANartc
 * JAANartc OpenAPI Documentations
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ErrorResponse } from '../model/errorResponse';
import { MongoErrorResponse } from '../model/mongoErrorResponse';
import { NewTodoParams } from '../model/newTodoParams';
import { TodoResponse } from '../model/todoResponse';
import { TodoVm } from '../model/todoVm';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TodoService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Create new Todo
     * @param newTodoParams Create New Todo Params
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTodo(newTodoParams?: NewTodoParams, observe?: 'body', reportProgress?: boolean): Observable<TodoResponse>;
    public createTodo(newTodoParams?: NewTodoParams, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TodoResponse>>;
    public createTodo(newTodoParams?: NewTodoParams, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TodoResponse>>;
    public createTodo(newTodoParams?: NewTodoParams, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<TodoResponse>(`${this.basePath}/api/todos/create`,
            newTodoParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Remove a Todo
     * @param todoId Todo ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTodo(todoId: string, observe?: 'body', reportProgress?: boolean): Observable<TodoVm>;
    public deleteTodo(todoId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TodoVm>>;
    public deleteTodo(todoId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TodoVm>>;
    public deleteTodo(todoId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (todoId === null || todoId === undefined) {
            throw new Error('Required parameter todoId was null or undefined when calling deleteTodo.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<TodoVm>(`${this.basePath}/api/todos/todo/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get all todos
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTodos(observe?: 'body', reportProgress?: boolean): Observable<Array<TodoVm>>;
    public getAllTodos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TodoVm>>>;
    public getAllTodos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TodoVm>>>;
    public getAllTodos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TodoVm>>(`${this.basePath}/api/todos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a single Todo
     * @param slug Todo slug
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSingleTodo(slug: string, observe?: 'body', reportProgress?: boolean): Observable<TodoVm>;
    public getSingleTodo(slug: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TodoVm>>;
    public getSingleTodo(slug: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TodoVm>>;
    public getSingleTodo(slug: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (slug === null || slug === undefined) {
            throw new Error('Required parameter slug was null or undefined when calling getSingleTodo.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<TodoVm>(`${this.basePath}/api/todos/todo/${encodeURIComponent(String(slug))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get all todos by User
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTodosByUser(observe?: 'body', reportProgress?: boolean): Observable<Array<TodoVm>>;
    public getTodosByUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TodoVm>>>;
    public getTodosByUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TodoVm>>>;
    public getTodosByUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TodoVm>>(`${this.basePath}/api/todos/my-todos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update a single Todo
     * @param todoId Todo ID
     * @param updatedTodo Updated Todo data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTodo(todoId: string, updatedTodo: TodoVm, observe?: 'body', reportProgress?: boolean): Observable<TodoVm>;
    public updateTodo(todoId: string, updatedTodo: TodoVm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TodoVm>>;
    public updateTodo(todoId: string, updatedTodo: TodoVm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TodoVm>>;
    public updateTodo(todoId: string, updatedTodo: TodoVm, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (todoId === null || todoId === undefined) {
            throw new Error('Required parameter todoId was null or undefined when calling updateTodo.');
        }
        if (updatedTodo === null || updatedTodo === undefined) {
            throw new Error('Required parameter updatedTodo was null or undefined when calling updateTodo.');
        }

        let headers = this.defaultHeaders;

        // authentication (JWT) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<TodoVm>(`${this.basePath}/api/todos/todo/${encodeURIComponent(String(id))}`,
            updatedTodo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
